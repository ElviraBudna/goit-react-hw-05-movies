{"version":3,"file":"static/js/630.287eb807.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.styled.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\nimport defaultImage from 'images/photo.jpg';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderBox = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { ColorRing } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderBox>\n      <ColorRing\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </LoaderBox>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const ListOfMovies = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 12px;\n`;\n\nexport const Item = styled.li`\n  height: 100%;\n`;\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  font-style: normal;\n  display: block;\n\n  font-size: 20px;\n\n  color: currentColor;\n`;\n\nexport const ItemBox = styled.div`\n  position: relative;\n  padding: 10px;\n  display: flex;\n  gap: 4px;\n  align-items: stretch;\n  flex-direction: column;\n`;\n\nexport const TitleMovie = styled.h2`\n  margin-top: 15px;\n  font-size: 19px;\n  text-align: center;\n`;\nexport const Img = styled.img`\n  max-width: 100%;\n  height: 100%;\n  min-height: 440px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  margin-bottom: 16px;\n\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  LinkStyled,\n  TitleMovie,\n  ListOfMovies,\n  Item,\n  Img,\n} from 'components/MoviesList/MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ListOfMovies>\n      {movies.map(movie => (\n        <Item key={movie.id}>\n          <LinkStyled to={`/movies/${movie.id}`} state={{ from: location }}>\n            <Img src={movie.poster} alt={movie.title} />\n            <TitleMovie>{movie.title}</TitleMovie>\n          </LinkStyled>\n        </Item>\n      ))}\n    </ListOfMovies>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const MovieMain = styled.main`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n","import styled from '@emotion/styled';\n\nexport const SerchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 320px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin: 0 auto;\n`;\nexport const SerchButton = styled.button`\n  display: inline-block;\n  width: 68px;\n  height: 30px;\n  border: 0;\n  border-radius: 4px;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  height: 30px;\n  font: inherit;\n  font-size: 26px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  outline: none;\n  padding: 0 8px 4px 8px;\n  margin-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { SerchForm, SerchButton, Input } from './SearchForm.styled';\n\nconst SearchFormForMovies = ({ value, onChange, onSubmit }) => {\n  return (\n    <SerchForm onSubmit={onSubmit}>\n      <Input\n        name=\"search\"\n        type=\"text\"\n        placeholder=\"Enter query\"\n        autoComplete=\"off\"\n        autoFocus\n        value={value}\n        onChange={onChange}\n      />\n      <SerchButton type=\"submit\">Search</SerchButton>\n    </SerchForm>\n  );\n};\n\nSearchFormForMovies.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchFormForMovies;\n","import Notiflix from 'notiflix';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { MovieMain } from './Movies.styled';\nimport { fetchQueryMovies, normalizeMoviesList } from 'api/moviesAPI';\nimport SearchFormForMovies from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const fromParams = searchParams.get('query');\n\n  useEffect(() => {\n    if (fromParams === null) {\n      return;\n    }\n    try {\n      const getQueryMovies = async () => {\n        setIsLoading(true);\n        const {\n          data: { results },\n        } = await fetchQueryMovies(fromParams);\n        if (!results.length) {\n          Notiflix.Notify.warning(\n            'Oops there are no movies by this search, try another title'\n          );\n        }\n        setMovies(normalizeMoviesList(results));\n      };\n\n      getQueryMovies();\n    } catch (error) {\n      console.error(error);\n      Notiflix.Notify.failure('Error fetching movies');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [fromParams, searchParams]);\n\n  const onChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const value = e.target.elements.search?.value;\n    if (!value || value.trim() === '') {\n      Notiflix.Notify.failure('Enter title of movie to search');\n      return;\n    }\n    setQuery(value.toLowerCase().trim());\n    setSearchParams({ query: value.toLowerCase().trim() });\n  };\n\n  return (\n    <MovieMain>\n      <SearchFormForMovies\n        value={query}\n        onChange={onChange}\n        onSubmit={handleSubmit}\n      />\n      {isLoading && <Loader />}\n      {movies ? <MoviesList movies={movies} /> : <></>}\n    </MovieMain>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","poster_path","poster","defaultImage","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","LoaderBox","styled","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","ListOfMovies","Item","LinkStyled","Link","TitleMovie","Img","movies","location","useLocation","movie","to","state","from","src","alt","MovieMain","SerchForm","SerchButton","Input","value","onChange","onSubmit","type","placeholder","autoComplete","autoFocus","useState","setMovies","query","setQuery","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","fromParams","get","useEffect","getQueryMovies","results","data","length","SearchForm","e","target","preventDefault","elements","search","trim","toLowerCase","Loader","MoviesList"],"sourceRoot":""}