{"version":3,"file":"static/js/592.5436fafe.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\nimport defaultImage from 'images/photo.jpg';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastInfoBox = styled.div`\n  display: flex;\n  padding: 4px;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n  text-align: center;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const CastImg = styled.img`\n  object-fit: cover;\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\n\nexport const Title = styled.h3`\n  font-size: 20px;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  font-weight: 400;\n`;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastInfo, normalizedCast } from 'api/moviesAPI';\nimport {\n  CastList,\n  Item,\n  CastImg,\n  CastInfoBox,\n  Title,\n  Text,\n} from './Cast.styled';\nimport { ErrorMessege } from 'components/Reviews/Reviews.styled';\n\nconst Cast = () => {\n  const [castList, setCastList] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCastInfo = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchCastInfo(movieId);\n\n        setCastList(normalizedCast(cast));\n      } catch (error) {\n        console.error(error);\n        Notiflix.Notify.failure('Error fetching cast');\n      }\n    };\n\n    getCastInfo();\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {!castList.length ? (\n        <ErrorMessege>Not found info about cast</ErrorMessege>\n      ) : (\n        castList.map(({ id, character, name, photo }) => {\n          return (\n            <Item key={id}>\n              <CastImg src={photo} alt={name} />\n              <CastInfoBox>\n                <Title>{name}</Title>\n                <Text>{character}</Text>\n              </CastInfoBox>\n            </Item>\n          );\n        })\n      )}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n\n  > li {\n    padding: 15px;\n    display: flex;\n    gap: 10px;\n    border-bottom: 1px solid black;\n    flex-direction: column;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n    background-color: rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(2px);\n    border-radius: 5px;\n    > div {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      > img {\n        border-radius: 50%;\n      }\n    }\n  }\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 8px;\n  font-size: 20px;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  cursor: pointer;\n`;\n\nexport const ErrorMessege = styled.p`\n  font-size: 36px;\n  text-align: center;\n  padding: 20px;\n  font-weight: 800;\n`;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","poster_path","poster","defaultImage","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","CastList","styled","CastInfoBox","Item","CastImg","Title","Text","useState","castList","setCastList","useParams","useEffect","getCastInfo","cast","data","length","src","alt","ReviewsList","ErrorMessege"],"sourceRoot":""}