{"version":3,"file":"static/js/368.159293f4.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/Reviews/Reviews.jsx","components/Reviews/Reviews.styled.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\nimport defaultImage from 'images/photo.jpg';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : defaultImage,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import Notiflix from 'notiflix';\nimport { fetchReviews, normalizedReviews } from 'api/moviesAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsList, ErrorMessege, Text, Title } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [expandedIndex, setExpandedIndex] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const response = await fetchReviews(movieId);\n        const data = response.data.results;\n        const result = normalizedReviews(data);\n\n        setReviews(result);\n      } catch (error) {\n        console.error(error);\n        Notiflix.Notify.failure('Error fetching reviews');\n      }\n    };\n\n    getReviews();\n  }, [movieId]);\n\n  const toggleExpand = index => {\n    setExpandedIndex(index === expandedIndex ? null : index);\n  };\n\n  return (\n    <ReviewsList>\n      {!reviews.length ? (\n        <ErrorMessege>We do not have any reviews for this movie.</ErrorMessege>\n      ) : (\n        reviews.map(({ id, author, content, avatar }, index) => {\n          const truncatedContent =\n            content.length > 150 ? content.slice(0, 150) + '...' : content;\n          return (\n            <li key={id}>\n              <div>\n                <Title>Author: {author}</Title>\n              </div>\n              <Text onClick={() => toggleExpand(index)}>\n                {index === expandedIndex ? content : truncatedContent}\n              </Text>\n            </li>\n          );\n        })\n      )}\n    </ReviewsList>\n  );\n};\nexport default Reviews;\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n\n  > li {\n    padding: 15px;\n    display: flex;\n    gap: 10px;\n    border-bottom: 1px solid black;\n    flex-direction: column;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n    background-color: rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(2px);\n    border-radius: 5px;\n    > div {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      > img {\n        border-radius: 50%;\n      }\n    }\n  }\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 8px;\n  font-size: 20px;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  cursor: pointer;\n`;\n\nexport const ErrorMessege = styled.p`\n  font-size: 36px;\n  text-align: center;\n  padding: 20px;\n  font-weight: 800;\n`;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","poster_path","poster","defaultImage","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","useState","reviews","setReviews","expandedIndex","setExpandedIndex","useParams","useEffect","getReviews","response","data","results","result","length","index","truncatedContent","avatar","slice","onClick","toggleExpand","ReviewsList","styled","Title","Text","ErrorMessege"],"sourceRoot":""}